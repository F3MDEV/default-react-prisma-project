[{"C:\\Users\\pedro\\Desktop\\pilot-project\\f3m-prjt\\src\\App.tsx":"1","C:\\Users\\pedro\\Desktop\\pilot-project\\f3m-prjt\\src\\reportWebVitals.ts":"2","C:\\Users\\pedro\\Desktop\\pilot-project\\f3m-prjt\\src\\components\\valuesCard\\valuesCard.tsx":"3","C:\\Users\\pedro\\Desktop\\pilot-project\\f3m-prjt\\src\\container\\dashboard\\dashboard.tsx":"4","C:\\Users\\pedro\\Desktop\\pilot-project\\f3m-prjt\\src\\index.tsx":"5","C:\\Users\\pedro\\Desktop\\pilot-project\\f3m-prjt\\src\\components\\charts\\typeCharts\\doughnutChart.tsx":"6","C:\\Users\\pedro\\Desktop\\pilot-project\\f3m-prjt\\src\\components\\charts\\chart.tsx":"7","C:\\Users\\pedro\\Desktop\\pilot-project\\f3m-prjt\\src\\components\\charts\\typeCharts\\lineChart.tsx":"8","C:\\Users\\pedro\\Desktop\\pilot-project\\f3m-prjt\\src\\store\\reducers\\gamesReducer.js":"9","C:\\Users\\pedro\\Desktop\\pilot-project\\f3m-prjt\\src\\store\\index.js":"10","C:\\Users\\pedro\\Desktop\\pilot-project\\f3m-prjt\\src\\store\\actions\\gamesAction.js":"11","C:\\Users\\pedro\\Desktop\\pilot-project\\f3m-prjt\\src\\api.tsx":"12"},{"size":272,"mtime":1612384037788,"results":"13","hashOfConfig":"14"},{"size":425,"mtime":1609988879273,"results":"15","hashOfConfig":"16"},{"size":1215,"mtime":1612160578438,"results":"17","hashOfConfig":"14"},{"size":4938,"mtime":1612385987072,"results":"18","hashOfConfig":"14"},{"size":1007,"mtime":1612381525864,"results":"19","hashOfConfig":"14"},{"size":3911,"mtime":1612160449094,"results":"20","hashOfConfig":"14"},{"size":4618,"mtime":1612205625542,"results":"21","hashOfConfig":"14"},{"size":8558,"mtime":1612206496303,"results":"22","hashOfConfig":"14"},{"size":392,"mtime":1612383702442,"results":"23","hashOfConfig":"14"},{"size":559,"mtime":1612371033580,"results":"24","hashOfConfig":"14"},{"size":464,"mtime":1612383700600,"results":"25","hashOfConfig":"14"},{"size":1203,"mtime":1612382544513,"results":"26","hashOfConfig":"14"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"j80ho8",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"sr48e8",{"filePath":"31","messages":"32","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"34"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"34"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"C:\\Users\\pedro\\Desktop\\pilot-project\\f3m-prjt\\src\\App.tsx",["58","59"],"C:\\Users\\pedro\\Desktop\\pilot-project\\f3m-prjt\\src\\reportWebVitals.ts",[],"C:\\Users\\pedro\\Desktop\\pilot-project\\f3m-prjt\\src\\components\\valuesCard\\valuesCard.tsx",["60","61"],"import React, { FunctionComponent, useState, useEffect } from 'react';\r\n//INSIDE COMPONENTS\r\n\r\n//OUTSIDE COMPONENTS\r\nimport Paper from '@material-ui/core/Paper';\r\nimport { makeStyles } from '@material-ui/core';\r\n\r\n//CSS, STYLES & MEDIA ASSETS\r\n\r\n//UTILS\r\n\r\ninterface ValuesCardProps {\r\n    colorOfValueSection?: string,\r\n    colorTextOfValueSection?: string,\r\n    value?: string,\r\n    title?: string,\r\n    subTitle?: string,\r\n}\r\n\r\nconst ValuesCard: FunctionComponent<ValuesCardProps> = ({\r\n    colorOfValueSection = \"#007eb0\",\r\n    colorTextOfValueSection = \"#fff\",\r\n    value = \"No value\",\r\n    title = \"No title\",\r\n    subTitle= \"No subtitle\",\r\n}) => {\r\n\r\n    const useStyles = makeStyles((theme) => ({\r\n      valueSection: {\r\n        background: colorOfValueSection,\r\n        color: colorTextOfValueSection\r\n      }\r\n    }));\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <>\r\n            <Paper>\r\n              <div className={`${classes.valueSection} py-3`}>\r\n                <h3>{value}</h3>\r\n              </div>\r\n              <h4 className={`py-2`}>{title}</h4>\r\n              <h5 className={`pb-1`}>{subTitle}</h5>\r\n            </Paper>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ValuesCard;\r\n",["62","63"],"C:\\Users\\pedro\\Desktop\\pilot-project\\f3m-prjt\\src\\container\\dashboard\\dashboard.tsx",["64","65"],"C:\\Users\\pedro\\Desktop\\pilot-project\\f3m-prjt\\src\\index.tsx",[],"C:\\Users\\pedro\\Desktop\\pilot-project\\f3m-prjt\\src\\components\\charts\\typeCharts\\doughnutChart.tsx",["66","67","68","69"],"import React, { useEffect, useRef, useState } from \"react\";\r\n\r\n//OUTSIDE COMPONENTS\r\nimport moment from 'moment';\r\nimport 'moment/locale/pt';\r\nimport 'moment/locale/en-gb'\r\nimport Chartjs, { ChartTooltipModel } from \"chart.js\";\r\nimport 'hammerjs';\r\nimport { PluginServiceRegistrationOptions, ChartColor, Scriptable, ChartPoint, ChartTooltipCallback, ChartLegendLabelItem, ChartData } from \"chart.js\";\r\nimport zoom from 'chartjs-plugin-zoom';\r\n\r\nexport interface DoughnutChartProps {\r\n\tpluginOfChart?: PluginServiceRegistrationOptions[],\r\n\r\n\tchartLabels?: any,\r\n\r\n\txStacked?: boolean,\r\n\tyStacked?: boolean,\r\n\r\n\tfirstLabelData?: string,\r\n\tfirstBorderColorData?: ChartColor | ChartColor[] | Scriptable<ChartColor>,\r\n\tfirstBackgroundColorData?: ChartColor | ChartColor[] | Scriptable<ChartColor>,\r\n\tfirstData?: Array<number | null | undefined> | ChartPoint[];\r\n\r\n\tlegendDisplay?: boolean,\r\n\r\n\tdateFrom?: string,\r\n\tdateTo?: string,\r\n\r\n\ttooltipCallback?: ChartTooltipCallback,\r\n\tcustomTooltip?: ((tooltipModel: ChartTooltipModel) => void) | undefined,\r\n\r\n\tyAxesTicksMin?: number,\r\n\tyAxesTicksMax?: number,\r\n\r\n\tyAxesTicksCallback?: (\r\n\t\tvalue: string | number,\r\n\t\tindex: number,\r\n\t\tvalues: number[] | string[]\r\n\t) => string | number | null | undefined;\r\n\r\n\tyAxesStepSize?: number\r\n\thidden?: boolean\r\n}\r\n\r\nconst DoughnutChart = ({\r\n\tchartLabels,\r\n\tfirstBorderColorData,\r\n\tfirstBackgroundColorData,\r\n\tfirstData,\r\n\ttooltipCallback,\r\n\tcustomTooltip,\r\n}: DoughnutChartProps) => {\r\n\t// initialise with null, but tell TypeScript we are looking for an HTMLCanvasElement\r\n\tconst chartContainer = useRef<HTMLCanvasElement>(null);\r\n\tconst [width, setWidth] = useState(window.innerWidth);\r\n\tconst [chartInstance, setChartInstance] = useState<Chart | null>();\r\n\r\n\tconst updateWindowDimensions = () => {\r\n\t\tsetWidth(window.innerWidth)\r\n\t}\r\n\r\n\tuseEffect(() => {\r\n\t\tlet language: string;\r\n\t\tlanguage = localStorage.getItem(\"i18nextLng\") || \"pt\";\r\n\t\tif (language.length > 2) {\r\n\t\t\tlanguage = language.substr(0, 2).toUpperCase();\r\n\t\t}\r\n\t\tmoment.locale(language)\r\n\r\n\t\tChartjs.plugins.register(zoom);\r\n\r\n\t\tupdateWindowDimensions();\r\n\r\n\t\tconst chartConfig = {\r\n\t\t\ttype: \"doughnut\",\r\n\t\t\tdata: {\r\n\t\t\t\tlabels: chartLabels as any,\r\n\t\t\t\tdatasets: [{\r\n\t\t\t\t\tlabel: '# of Tomatoes',\r\n\t\t\t\t\tdata: firstData as Array<number | null | undefined> | ChartPoint[],\r\n\t\t\t\t\tbackgroundColor: firstBackgroundColorData as ChartColor | ChartColor[] | Scriptable<ChartColor>,\r\n\t\t\t\t\tborderColor: firstBorderColorData as ChartColor | ChartColor[] | Scriptable<ChartColor>,\r\n\t\t\t\t\tborderWidth: 1\r\n\t\t\t\t}],\r\n\t\t\t},\r\n\t\t\toptions: {\r\n\t\t\t\tresponsive: true,\r\n\t\t\t\tmaintainAspectRatio: false,\r\n\t\t\t\ttooltips: {\r\n\t\t\t\t\tenabled: true,\r\n\t\t\t\t\tcustom: customTooltip as ((tooltipModel: ChartTooltipModel) => void) | undefined,\r\n\t\t\t\t\tmode: 'index' as \"label\" | \"index\" | \"x\" | \"point\" | \"nearest\" | \"single\" | \"x-axis\" | \"dataset\" | \"y\" | undefined,\r\n\t\t\t\t\tcallbacks: tooltipCallback as ChartTooltipCallback,\r\n\t\t\t\t\tfooterFontStyle: 'normal'\r\n\t\t\t\t},\r\n\t\t\t\tlegend: {\r\n\t\t\t\t\tposition: \"bottom\" as \"bottom\" | \"left\" | \"right\" | \"top\" | \"chartArea\" | undefined,\r\n\t\t\t\t\tlabels: {\r\n\t\t\t\t\t\tfontColor: \"#494949\",\r\n\t\t\t\t\t\tfontSize: 13,\r\n\t\t\t\t\t\tpadding: 15,\r\n\t\t\t\t\t\tboxWidth: 12.5,\r\n\t\t\t\t\t\tfilter: function (item: ChartLegendLabelItem, chart: ChartData) {\r\n\t\t\t\t\t\t\tif (item.text != undefined) {\r\n\t\t\t\t\t\t\t\treturn !item.text.includes('null');\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t},\r\n\t\t};\r\n\t\t// strict null checks need us to check if chartContainer and current exist.\r\n\t\t// but once current exists, it is of type HTMLCanvasElement\r\n\t\tif (chartContainer && chartContainer.current) {\r\n\t\t\tconst newChartInstance = new Chartjs(chartContainer.current, chartConfig);\r\n\t\t\tsetChartInstance(newChartInstance);\r\n\t\t}\r\n\t}, [firstData, chartLabels, window.innerWidth]);\r\n\r\n\treturn (\r\n\t\t<React.Fragment>\r\n\t\t\t<canvas ref={chartContainer} className=\"chart\" />\r\n\t\t</React.Fragment>\r\n\t);\r\n};\r\n\r\nexport default DoughnutChart;\r\n","C:\\Users\\pedro\\Desktop\\pilot-project\\f3m-prjt\\src\\components\\charts\\chart.tsx",["70","71","72"],"import React, { useEffect, useRef, useState } from \"react\";\r\n\r\n//OUTSIDE COMPONENTS\r\nimport { ChartType } from \"chart.js\";\r\n\r\n//INSIDE COMPONENTS´\r\nimport LineChart from \"./typeCharts/lineChart\";\r\nimport DoughnutChart from \"./typeCharts/doughnutChart\"\r\n\r\n//CSS\r\n\r\n//TYPES IMPORTS\r\nimport { LineChartProps as LineProps } from \"./typeCharts/lineChart\";\r\nimport { DoughnutChartProps as DoughnutProps } from \"./typeCharts/doughnutChart\"\r\n\r\nexport interface MainChartProps extends LineProps, DoughnutProps {\r\n    typeOfChart?: ChartType | string;\r\n    children?: any;\r\n    chartClasses?: string;\r\n}\r\n\r\nconst MainChart = ({ typeOfChart,\r\n    xAxisData,\r\n    //labelsXAxis,\r\n    chartLabels,\r\n    firstLabelData,\r\n    firstBorderColorData,\r\n    firstBackgroundColorData,\r\n    firstData,\r\n    secondLabelData,\r\n    secondBorderColorData,\r\n    secondBackgroundColorData,\r\n    secondData,\r\n    thirdLabelData,\r\n    thirdBorderColorData,\r\n    thirdBackgroundColorData,\r\n    thirdData,\r\n    fourthLabelData,\r\n    fourthBorderColorData,\r\n    fourthBackgroundColorData,\r\n    fourthData,\r\n    fifthLabelData,\r\n    fifthBorderColorData,\r\n    fifthBackgroundColorData,\r\n    fifthData,\r\n    xAxisType,\r\n    legendDisplay,\r\n    dateFrom,\r\n    dateTo,\r\n    tooltipCallback,\r\n    yAxesTicksMin,\r\n    yAxesTicksMax,\r\n    customTooltip,\r\n    yAxesTicksCallback,\r\n    yAxesStepSize,\r\n    hidden = false,\r\n    chartClasses,\r\n}: MainChartProps) => {\r\n\r\n    return (\r\n        <div className={`chart-container ${chartClasses} `}>\r\n            {(() => {\r\n                switch (typeOfChart) {\r\n                    case undefined:\r\n                        return <p>UNDEFINED !!! (WAITING FOR A EMPTY STATE)</p>\r\n                    case \"line\":\r\n                        return <LineChart\r\n                            xAxisData={xAxisData}\r\n                            //labelsXAxis={labelsXAxis}\r\n                            firstLabelData={firstLabelData}\r\n                            firstBorderColorData={firstBorderColorData}\r\n                            firstBackgroundColorData={firstBackgroundColorData}\r\n                            firstData={firstData}\r\n                            secondLabelData={secondLabelData}\r\n                            secondBorderColorData={secondBorderColorData}\r\n                            secondBackgroundColorData={secondBackgroundColorData}\r\n                            secondData={secondData}\r\n                            thirdLabelData={thirdLabelData}\r\n                            thirdBorderColorData={thirdBorderColorData}\r\n                            thirdBackgroundColorData={thirdBackgroundColorData}\r\n                            thirdData={thirdData}\r\n                            fourthLabelData={fourthLabelData}\r\n                            fourthBorderColorData={fourthBorderColorData}\r\n                            fourthBackgroundColorData={fourthBackgroundColorData}\r\n                            fourthData={fourthData}\r\n                            fifthLabelData={fifthLabelData}\r\n                            fifthBorderColorData={fifthBorderColorData}\r\n                            fifthBackgroundColorData={fifthBackgroundColorData}\r\n                            fifthData={fifthData}\r\n                            xAxisType={xAxisType}\r\n                            legendDisplay={legendDisplay}\r\n                            dateFrom={dateFrom}\r\n                            dateTo={dateTo}\r\n                            //customTooltip={customTooltip}\r\n                            tooltipCallback={tooltipCallback}\r\n                            yAxesTicksMin={yAxesTicksMin}\r\n                            yAxesTicksMax={yAxesTicksMax}\r\n                            yAxesTicksCallback={yAxesTicksCallback}\r\n                            yAxesStepSize={yAxesStepSize}\r\n                            hidden={hidden}\r\n                        ></LineChart>\r\n                    case \"doughnut\":\r\n                        return <DoughnutChart\r\n                            chartLabels={chartLabels}\r\n                            firstLabelData={firstLabelData}\r\n                            firstBorderColorData={firstBorderColorData}\r\n                            firstBackgroundColorData={firstBackgroundColorData}\r\n                            firstData={firstData}\r\n                            customTooltip={customTooltip}\r\n                            tooltipCallback={tooltipCallback}\r\n                        ></DoughnutChart>\r\n                    default:\r\n                        return <p>No Chart</p>\r\n                }\r\n            })()}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MainChart;\r\n","C:\\Users\\pedro\\Desktop\\pilot-project\\f3m-prjt\\src\\components\\charts\\typeCharts\\lineChart.tsx",["73","74","75","76","77"],"import React, { useEffect, useRef, useState } from \"react\";\r\n\r\n//OUTSIDE COMPONENTS\r\nimport moment, { Moment } from 'moment';\r\nimport 'moment/locale/pt';\r\nimport 'moment/locale/en-gb'\r\nimport Chartjs, { ChartTooltipModel } from \"chart.js\";\r\nimport 'hammerjs';\r\nimport { PluginServiceRegistrationOptions, ChartColor, Scriptable, ChartPoint, ChartTooltipCallback, ChartLegendLabelItem, ChartData } from \"chart.js\";\r\nimport zoom from 'chartjs-plugin-zoom';\r\n\r\nexport interface LineChartProps {\r\n\tpluginOfChart?: PluginServiceRegistrationOptions[],\r\n\txAxisData?: number | string | Date | Moment,\r\n\r\n\t//labelsXAxis?: (string | TFunctionResult | undefined | number | Date | Moment | number[] | string[] | Date[] | Moment[])[] | undefined,\r\n\r\n\tfirstLabelData?: string,\r\n\tfirstBorderColorData?: ChartColor | ChartColor[] | Scriptable<ChartColor>,\r\n\tfirstBackgroundColorData?: ChartColor | ChartColor[] | Scriptable<ChartColor>,\r\n\tfirstData?: Array<number | null | undefined> | ChartPoint[];\r\n\r\n\tsecondLabelData?: string,\r\n\tsecondBorderColorData?: ChartColor | ChartColor[] | Scriptable<ChartColor>,\r\n\tsecondBackgroundColorData?: ChartColor | ChartColor[] | Scriptable<ChartColor>,\r\n\tsecondData?: Array<number | null | undefined> | ChartPoint[];\r\n\r\n\tthirdLabelData?: string,\r\n\tthirdBorderColorData?: ChartColor | ChartColor[] | Scriptable<ChartColor>,\r\n\tthirdBackgroundColorData?: ChartColor | ChartColor[] | Scriptable<ChartColor>,\r\n\tthirdData?: Array<number | null | undefined> | ChartPoint[];\r\n\r\n\tfourthLabelData?: string,\r\n\tfourthBorderColorData?: ChartColor | ChartColor[] | Scriptable<ChartColor>,\r\n\tfourthBackgroundColorData?: ChartColor | ChartColor[] | Scriptable<ChartColor>,\r\n\tfourthData?: Array<number | null | undefined> | ChartPoint[];\r\n\r\n\tfifthLabelData?: string,\r\n\tfifthBorderColorData?: ChartColor | ChartColor[] | Scriptable<ChartColor>,\r\n\tfifthBackgroundColorData?: ChartColor | ChartColor[] | Scriptable<ChartColor>,\r\n\tfifthData?: Array<number | null | undefined> | ChartPoint[];\r\n\r\n\txAxisType?: string,\r\n\r\n\tlegendDisplay?: boolean\r\n\r\n\tdateFrom?: string,\r\n\tdateTo?: string,\r\n\r\n\ttooltipCallback?: ChartTooltipCallback,\r\n\t//customTooltip?: ((tooltipModel: ChartTooltipModel) => void) | undefined,\r\n\r\n\tyAxesTicksMin?: number,\r\n\tyAxesTicksMax?: number,\r\n\r\n\tyAxesTicksCallback?: (\r\n\t\tvalue: string | number,\r\n\t\tindex: number,\r\n\t\tvalues: number[] | string[]\r\n\t) => string | number | null | undefined;\r\n\r\n\tyAxesStepSize?: number\r\n\thidden?: boolean\r\n}\r\n\r\nconst LineChart = ({\r\n\tpluginOfChart,\r\n\txAxisData,\r\n\t//labelsXAxis,\r\n\tfirstLabelData,\r\n\tfirstBorderColorData,\r\n\tfirstBackgroundColorData,\r\n\tfirstData,\r\n\tsecondLabelData,\r\n\tsecondBorderColorData,\r\n\tsecondBackgroundColorData,\r\n\tsecondData,\r\n\tthirdLabelData,\r\n\tthirdBorderColorData,\r\n\tthirdBackgroundColorData,\r\n\tthirdData,\r\n\tfourthLabelData,\r\n\tfourthBorderColorData,\r\n\tfourthBackgroundColorData,\r\n\tfourthData,\r\n\tfifthLabelData,\r\n\tfifthBorderColorData,\r\n\tfifthBackgroundColorData,\r\n\tfifthData,\r\n\txAxisType,\r\n\tlegendDisplay,\r\n\tdateFrom,\r\n\tdateTo,\r\n\t//customTooltip,\r\n\ttooltipCallback,\r\n\tyAxesTicksMin,\r\n\tyAxesTicksMax,\r\n\tyAxesTicksCallback,\r\n\tyAxesStepSize = 1,\r\n\thidden = false\r\n}: LineChartProps) => {\r\n\t// initialise with null, but tell TypeScript we are looking for an HTMLCanvasElement\r\n\tconst chartContainer = useRef<HTMLCanvasElement>(null);\r\n\tconst [chartInstance, setChartInstance] = useState<Chart | null>();\r\n\tconst [zoomOn, setZoomOn] = useState(false);\r\n\tconst chartConfig = {\r\n\t\ttype: \"line\",\r\n\t\tlabels: ['Jan', 'Feb', 'Mar', 'Apr', 'Mei', 'Jun', 'Jul'],\r\n\t\tmaintainAspectRatio: false,\r\n\t\tdata: {\r\n\t\t\tx: xAxisData as number | string | Date | Moment,\r\n\t\t\tdatasets: [{\r\n\t\t\t\tlabel: firstLabelData as string,\r\n\t\t\t\tfill: false,\r\n\t\t\t\tlineTension: 0.2,\r\n\t\t\t\tborderColor: firstBorderColorData as ChartColor | ChartColor[] | Scriptable<ChartColor>,\r\n\t\t\t\tbackgroundColor: firstBackgroundColorData as ChartColor | ChartColor[] | Scriptable<ChartColor>,\r\n\t\t\t\tborderWidth: 1,\r\n\t\t\t\tpointHitRadius: 10,\r\n\t\t\t\tdata: firstData as Array<number | null | undefined> | ChartPoint[]\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tlabel: secondLabelData as string,\r\n\t\t\t\tfill: false,\r\n\t\t\t\tlineTension: 0.2,\r\n\t\t\t\tborderColor: secondBorderColorData as ChartColor | ChartColor[] | Scriptable<ChartColor>,\r\n\t\t\t\tbackgroundColor: secondBackgroundColorData as ChartColor | ChartColor[] | Scriptable<ChartColor>,\r\n\t\t\t\tborderWidth: 1,\r\n\t\t\t\tpointHitRadius: 10,\r\n\t\t\t\tdata: secondData as Array<number | null | undefined> | ChartPoint[]\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tlabel: thirdLabelData as string,\r\n\t\t\t\tfill: false,\r\n\t\t\t\tlineTension: 0.2,\r\n\t\t\t\tborderColor: thirdBorderColorData as ChartColor | ChartColor[] | Scriptable<ChartColor>,\r\n\t\t\t\tbackgroundColor: thirdBackgroundColorData as ChartColor | ChartColor[] | Scriptable<ChartColor>,\r\n\t\t\t\tborderWidth: 1,\r\n\t\t\t\tpointHitRadius: 10,\r\n\t\t\t\tdata: thirdData as Array<number | null | undefined> | ChartPoint[]\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tlabel: fourthLabelData as string,\r\n\t\t\t\tfill: false,\r\n\t\t\t\tlineTension: 0.2,\r\n\t\t\t\tborderColor: fourthBorderColorData as ChartColor | ChartColor[] | Scriptable<ChartColor>,\r\n\t\t\t\tbackgroundColor: fourthBackgroundColorData as ChartColor | ChartColor[] | Scriptable<ChartColor>,\r\n\t\t\t\tborderWidth: 1,\r\n\t\t\t\tpointHitRadius: 10,\r\n\t\t\t\tdata: fourthData as Array<number | null | undefined> | ChartPoint[]\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tlabel: fifthLabelData as string,\r\n\t\t\t\tfill: false,\r\n\t\t\t\tlineTension: 0.2,\r\n\t\t\t\tborderColor: fifthBorderColorData as ChartColor | ChartColor[] | Scriptable<ChartColor>,\r\n\t\t\t\tbackgroundColor: fifthBackgroundColorData as ChartColor | ChartColor[] | Scriptable<ChartColor>,\r\n\t\t\t\tborderWidth: 1,\r\n\t\t\t\tpointHitRadius: 10,\r\n\t\t\t\tdata: fifthData as Array<number | null | undefined> | ChartPoint[]\r\n\t\t\t},\r\n\t\t\t],\r\n\t\t},\r\n\t\toptions: {\r\n\t\t\tlegend: {\r\n\t\t\t\tdisplay: legendDisplay as boolean,\r\n\t\t\t\tposition: 'bottom' as \"bottom\" | \"left\" | \"right\" | \"top\" | \"chartArea\" | undefined,\r\n\t\t\t\tlabels: {\r\n\t\t\t\t\tfontSize: 10,\r\n\t\t\t\t\tboxWidth: 20,\r\n\t\t\t\t\tfilter: function (item: ChartLegendLabelItem, chart: ChartData) {\r\n\t\t\t\t\t\tif (item.text != undefined) {\r\n\t\t\t\t\t\t\treturn !item.text.includes('null');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t},\r\n\r\n\t\t\ttooltips: {\r\n\t\t\t\tenabled: true,\r\n\t\t\t\t//custom: customTooltip as ((tooltipModel: ChartTooltipModel) => void) | undefined,\r\n\t\t\t\tmode: 'index' as \"label\" | \"index\" | \"x\" | \"point\" | \"nearest\" | \"single\" | \"x-axis\" | \"dataset\" | \"y\" | undefined,\r\n\t\t\t\tcallbacks: tooltipCallback as ChartTooltipCallback,\r\n\t\t\t\tfooterFontStyle: 'normal'\r\n\t\t\t},\r\n\t\t\tpan: {\r\n\t\t\t\tenabled: true,\r\n\t\t\t\tmode: 'x'\r\n\t\t\t},\r\n\t\t\tzoom: {\r\n\t\t\t\tenabled: zoomOn,\r\n\t\t\t\tmode: 'x'\r\n\t\t\t},\r\n\t\t\tresponsive: true,\r\n\t\t\tevents: ['click'],\r\n\r\n\t\t\tscales: {\r\n\t\t\t\txAxes: [{\r\n\t\t\t\t\ttype: xAxisType as string,\r\n\t\t\t\t\tticks: {\r\n\t\t\t\t\t\tautoSkip: true,\r\n\t\t\t\t\t\tmaxTicksLimit: 20,\r\n\t\t\t\t\t\tcallback: function(value: string) {\r\n\t\t\t\t\t\t\tif(value.length > 10){\r\n\t\t\t\t\t\t\t\treturn value.slice(0, 10) + \"...\"\r\n\t\t\t\t\t\t \t} else {\r\n\t\t\t\t\t\t \t\treturn value\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t \t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\ttime: {\r\n\t\t\t\t\t\tparse: 'DD/MM/YYYY',\r\n\t\t\t\t\t\ttooltipFormat: 'DD MMM',\r\n\t\t\t\t\t\tdisplayFormats: {\r\n\t\t\t\t\t\t\t'day': 'DD MMM',\r\n\t\t\t\t\t\t\t'minute': 'DD MMM',\r\n\t\t\t\t\t\t\t'hour': 'DD MMM',\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tunit: 'day' as \"day\" | \"millisecond\" | \"second\" | \"minute\" | \"hour\" | \"week\" | \"month\" | \"quarter\" | \"year\" | undefined,\r\n\t\t\t\t\t\tmin: dateFrom as string,\r\n\t\t\t\t\t\tmax: dateTo as string\r\n\t\t\t\t\t}\r\n\t\t\t\t}],\r\n\r\n\t\t\t\tyAxes: [{\r\n\t\t\t\t\tticks: {\r\n\t\t\t\t\t\tmin: yAxesTicksMin as number,//-0.1,\r\n\t\t\t\t\t\tmax: yAxesTicksMax as number,\r\n\t\t\t\t\t\tstepSize: yAxesStepSize,\r\n\t\t\t\t\t\tcallback: yAxesTicksCallback as (\r\n\t\t\t\t\t\t\tvalue: string | number,\r\n\t\t\t\t\t\t\tindex: number,\r\n\t\t\t\t\t\t\tvalues: number[] | string[]\r\n\t\t\t\t\t\t) => string | number | null | undefined\r\n\t\t\t\t\t},\r\n\t\t\t\t\tscaleLabel: {\r\n\t\t\t\t\t\tshow: true,\r\n\t\t\t\t\t\tlabelString: 'Value'\r\n\t\t\t\t\t}\r\n\t\t\t\t}],\r\n\t\t\t},\r\n\t\t},\r\n\t\tplugins: pluginOfChart as PluginServiceRegistrationOptions[],\r\n\t};\r\n\r\n\tuseEffect(() => {\r\n\t\tlet language: string;\r\n\t\tlanguage = localStorage.getItem(\"i18nextLng\") || \"pt\";\r\n\t\tif (language.length > 2) {\r\n\t\t\tlanguage = language.substr(0, 2).toUpperCase();\r\n\t\t}\r\n\t\tmoment.locale(language)\r\n\r\n\t\tChartjs.plugins.register(zoom);\r\n\r\n\t\t// strict null checks need us to check if chartContainer and current exist.\r\n\t\t// but once current exists, it is of type HTMLCanvasElement\r\n\t\tif (chartContainer && chartContainer.current) {\r\n\t\t\tconst newChartInstance = new Chartjs(chartContainer.current, chartConfig);\r\n\t\t\tsetChartInstance(newChartInstance);\r\n\t\t}\r\n\t}, [dateTo, dateFrom, firstData]);\r\n\r\n\treturn (\r\n\t\t<React.Fragment>\r\n\t\t\t<canvas hidden={hidden} ref={chartContainer} className=\"chart\" />\r\n\t\t</React.Fragment>\r\n\t);\r\n};\r\n\r\nexport default LineChart;\r\n",["78","79"],"C:\\Users\\pedro\\Desktop\\pilot-project\\f3m-prjt\\src\\store\\reducers\\gamesReducer.js",[],["80","81"],"C:\\Users\\pedro\\Desktop\\pilot-project\\f3m-prjt\\src\\store\\index.js",[],"C:\\Users\\pedro\\Desktop\\pilot-project\\f3m-prjt\\src\\store\\actions\\gamesAction.js",[],"C:\\Users\\pedro\\Desktop\\pilot-project\\f3m-prjt\\src\\api.tsx",[],{"ruleId":"82","severity":1,"message":"83","line":1,"column":16,"nodeType":"84","messageId":"85","endLine":1,"endColumn":25},{"ruleId":"82","severity":1,"message":"86","line":2,"column":8,"nodeType":"84","messageId":"85","endLine":2,"endColumn":12},{"ruleId":"82","severity":1,"message":"87","line":1,"column":36,"nodeType":"84","messageId":"85","endLine":1,"endColumn":44},{"ruleId":"82","severity":1,"message":"83","line":1,"column":46,"nodeType":"84","messageId":"85","endLine":1,"endColumn":55},{"ruleId":"88","replacedBy":"89"},{"ruleId":"90","replacedBy":"91"},{"ruleId":"82","severity":1,"message":"87","line":1,"column":36,"nodeType":"84","messageId":"85","endLine":1,"endColumn":44},{"ruleId":"82","severity":1,"message":"92","line":33,"column":13,"nodeType":"84","messageId":"85","endLine":33,"endColumn":20},{"ruleId":"82","severity":1,"message":"93","line":56,"column":9,"nodeType":"84","messageId":"85","endLine":56,"endColumn":14},{"ruleId":"82","severity":1,"message":"94","line":57,"column":9,"nodeType":"84","messageId":"85","endLine":57,"endColumn":22},{"ruleId":"95","severity":1,"message":"96","line":105,"column":22,"nodeType":"97","messageId":"98","endLine":105,"endColumn":24},{"ruleId":"99","severity":1,"message":"100","line":119,"column":5,"nodeType":"101","endLine":119,"endColumn":48,"suggestions":"102"},{"ruleId":"82","severity":1,"message":"83","line":1,"column":17,"nodeType":"84","messageId":"85","endLine":1,"endColumn":26},{"ruleId":"82","severity":1,"message":"103","line":1,"column":28,"nodeType":"84","messageId":"85","endLine":1,"endColumn":34},{"ruleId":"82","severity":1,"message":"87","line":1,"column":36,"nodeType":"84","messageId":"85","endLine":1,"endColumn":44},{"ruleId":"82","severity":1,"message":"104","line":7,"column":19,"nodeType":"84","messageId":"85","endLine":7,"endColumn":36},{"ruleId":"82","severity":1,"message":"94","line":104,"column":9,"nodeType":"84","messageId":"85","endLine":104,"endColumn":22},{"ruleId":"82","severity":1,"message":"105","line":105,"column":17,"nodeType":"84","messageId":"85","endLine":105,"endColumn":26},{"ruleId":"95","severity":1,"message":"96","line":172,"column":21,"nodeType":"97","messageId":"98","endLine":172,"endColumn":23},{"ruleId":"99","severity":1,"message":"106","line":262,"column":5,"nodeType":"101","endLine":262,"endColumn":34,"suggestions":"107"},{"ruleId":"88","replacedBy":"108"},{"ruleId":"90","replacedBy":"109"},{"ruleId":"88","replacedBy":"108"},{"ruleId":"90","replacedBy":"109"},"@typescript-eslint/no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'logo' is defined but never used.","'useState' is defined but never used.","no-native-reassign",["110"],"no-negated-in-lhs",["111"],"'popular' is assigned a value but never used.","'width' is assigned a value but never used.","'chartInstance' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'customTooltip', 'firstBackgroundColorData', 'firstBorderColorData', and 'tooltipCallback'. Either include them or remove the dependency array. Outer scope values like 'window.innerWidth' aren't valid dependencies because mutating them doesn't re-render the component.","ArrayExpression",["112"],"'useRef' is defined but never used.","'ChartTooltipModel' is defined but never used.","'setZoomOn' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'chartConfig'. Either include it or remove the dependency array.",["113"],["110"],["111"],"no-global-assign","no-unsafe-negation",{"desc":"114","fix":"115"},{"desc":"116","fix":"117"},"Update the dependencies array to be: [firstData, chartLabels, firstBackgroundColorData, firstBorderColorData, customTooltip, tooltipCallback]",{"range":"118","text":"119"},"Update the dependencies array to be: [dateTo, dateFrom, firstData, chartConfig]",{"range":"120","text":"121"},[3714,3757],"[firstData, chartLabels, firstBackgroundColorData, firstBorderColorData, customTooltip, tooltipCallback]",[8363,8392],"[dateTo, dateFrom, firstData, chartConfig]"]